# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: ci-cd

on:
  push:
    branches: [ infra/#11-cicd, release ]

permissions:
  contents: read

jobs:
  build-spring-image:
    runs-on: ubuntu-latest
    environment: release
    defaults:
      run:
        shell: bash
        working-directory: ./be

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive' # submodule
          token: ${{ secrets.MY_GITHUB_TOKEN }}

      # JDK Setting
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          # cache directory setting
          path:
            ~/.gradle/caches
            ~/.gradle/wrapper
          # separate cache key setting
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          # 이전에 생성된 캐시 복원에 사용할 키 지정
          # 캐시가 없거나 만료되었을 때, 이 키를 기반으로 이전에 생성된 캐시를 찾아 복원
          restore-keys: |
            ${{ runner.os }}-gradle-

      # gradlew 실행을 위한 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # Gradle을 이용하여 빌드 수행
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # docker build & push to devleop
      - name: Docker build & push to release
        if: contains(github.ref, 'release') ||
          contains(github.ref, 'infra/#11-cicd')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/jazz_meet_app_release .
          docker push ${{ secrets.DOCKER_USERNAME }}/jazz_meet_app_release
      
  build-react-image:
    runs-on: ubuntu-latest
    environment: release
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        node-version: [ 18.x ]
    steps:
      - uses: actions/checkout@v3

      - name: make ".env" file
        if: |
          contains(github.ref, 'release') ||
          contains(github.ref, 'infra/#8-cicd')
        run: |
          touch ./fe/user/.env
          echo "${{ secrets.DOT_ENV }}" > ./fe/user/.env

      - name: Docker build to release
        if: contains(github.ref, 'release') ||
          contains(github.ref, 'infra/#11-cicd')
        run: |
          ls -la
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f ./fe/user/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/jazz_meet_web_release .
          docker push ${{ secrets.DOCKER_USERNAME }}/jazz_meet_web_release

  cd-pipeline:
    needs:
      - build-spring-image
      - build-react-image
    name: continuous deployment
    runs-on: ubuntu-latest
    environment: release

    steps:
      - uses: actions/checkout@master

      # nginx.conf 파일 EC2에 업로드
      - name: copy nginx.conf file via ssh password
        uses: appleboy/scp-action@master
        if: contains(github.ref, 'release') ||
          contains(github.ref, 'infra/#11-cicd')
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          source: "./nginx/nginx.conf"
          target: "/home/ubuntu/"

      # docker-compose.yml 파일 EC2에 업로드
      - name: copy docker-compose file via ssh password
        uses: appleboy/scp-action@master
        if: contains(github.ref, 'release') ||
          contains(github.ref, 'infra/#11-cicd')
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          source: "./docker-compose.yml"
          target: "/home/ubuntu/"

      # docker-compose 실행
      - name: Deploy to release
        uses: appleboy/ssh-action@master
        if: contains(github.ref, 'release') ||
          contains(github.ref, 'infra/#11-cicd')
        with:
          host: ${{ secrets.HOST }}  # EC2 인스턴스 퍼블릭 DNS
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}  # pem 키
          port: 22
          script: |
            sudo chmod 666 /var/run/docker.sock
            docker-compose -f docker-compose.yml down -v
            docker-compose -f docker-compose.yml pull
            docker-compose -f docker-compose.yml up -d
            docker image prune -f